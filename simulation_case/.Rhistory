parent_directory <- '/Users/susanany/Dropbox/PhD/CompGeo/repository'
source_name <- paste(parent_directory, 'simulation_case/src/functions.R', sep = '')
source(source_name)
parent_directory <- '/Users/susanany/Dropbox/PhD/CompGeo/repository/'
source_name <- paste(parent_directory, 'simulation_case/src/functions.R', sep = '')
source(source_name)
load(paste(parent_directory, 'data/cases.RData', sep = ''))
indexes_for_voi <- new_partition_indexes(labels = labels_array, seed = 1234, size_of_partition = 300)
indexes_for_survey <- new_complement_indexes_balanced(labels = labels_array, indexes_for_voi, seed = 1234, size_of_partition = 100)
path_out <- paste(parent_directory, 'simulation_case/output/', sep = '')
today <- format(Sys.time(), '%d%m%y')
list_fixed_plans <- list()
list_fixed_plans[[1]] <- list('survey_vector' = c('lower_seismic', 'lower_csem'),
'time_vector' = c(5, 14))
list_fixed_plans[[2]] <- list('survey_vector' = c('higher_seismic', 'higher_csem'),
'time_vector' = c(5, 14))
list_fixed_plans[[3]] <- list('survey_vector' = c('lower_seismic', 'lower_csem', 'lower_seismic', 'lower_csem'),
'time_vector' = c(5, 8, 11, 14))
list_fixed_plans[[4]] <- list('survey_vector' = c('higher_seismic', 'higher_csem', 'higher_seismic', 'higher_csem'),
'time_vector' = c(5, 8, 11, 14))
list_fixed_plans <- list()
list_fixed_plans[[1]] <- list('survey_vector' = c('lower_seismic', 'lower_csem'),
'time_vector' = c(5, 14))
list_fixed_plans[[2]] <- list('survey_vector' = c('higher_seismic', 'higher_csem'),
'time_vector' = c(5, 14))
list_fixed_plans[[3]] <- list('survey_vector' = c('lower_seismic', 'lower_csem', 'lower_seismic', 'lower_csem'),
'time_vector' = c(5, 8, 11, 14))
list_fixed_plans[[4]] <- list('survey_vector' = c('higher_seismic', 'higher_csem', 'higher_seismic', 'higher_csem'),
'time_vector' = c(5, 8, 11, 14))
times_for_fixed_plans <- c()
for(plan in 1:length(list_fixed_plans)){
survey_vector <- list_fixed_plans[[plan]]$survey_vector
time_vector <- list_fixed_plans[[plan]]$time_vector
file_out <- paste(path_out, 'prints_fixed_plan', plan, '_', today, '.txt', sep = '')
list_global <- list()
start <- proc.time()
for(k in 1:100){
print(k)
list_global[[k]] <- fixed_monitoring_plan(indexes_for_voi, index_survey = indexes_for_survey[k], survey_vector, time_vector, labels_array, parent_directory)
}
end <- proc.time()
print(end-start)
times_for_fixed_plans[plan] <- (end-start)[3]
file_out <- paste(path_out, 'list_fixed_',  plan, '_', today, '.RData', sep = '')
save(list_global, file = file_out)
}
source_name <- paste(parent_directory, 'simulation_case/src/functions.R', sep = '')
source(source_name)
today <- format(Sys.time(), '%d%m%y')
load(paste(parent_directory, 'data/cases.RData', sep = ''))
indexes_for_voi <- new_partition_indexes(labels = labels_array, seed = 1234, size_of_partition = 300)
indexes_for_survey <- new_complement_indexes_balanced(labels = labels_array, indexes_for_voi, seed = 1234, size_of_partition = 100)
path_out <- paste(parent_directory, 'simulation_case/output/', sep = '')
data_vector <- c('lower_csem', 'higher_csem', 'lower_seismic', 'higher_seismic')
print(data_vector)
list_prices <- list()
list_prices[[1]] <- data.frame(lower_csem = 0.1)
list_prices[[2]] <- data.frame(higher_csem = 0.15)
list_prices[[3]] <- data.frame(lower_seismic = 0.6)
list_prices[[4]] <- data.frame(higher_seismic = 0.65)
list_prices[[5]] <- data.frame(lower_csem = 0.1, higher_csem = 0.15, lower_seismic = 0.6, higher_seismic = 0.65)
df_price <- data.frame(lower_csem = 0.1, higher_csem = 0.15, lower_seismic = 0.6, higher_seismic = 0.65)
file_out <-  paste(path_out, 'prints_local_', today, '.txt', sep = '')
list_global <- list()
start <- proc.time()
capture.output(
for (k in 1:100){
print(k)
list_global[[k]] <- update_from_survey_multiple_data_types(indexes_for_voi, index_survey = indexes_for_survey[k], data_vector, df_price, labels_array, parent_directory, number_of_cores = 6, starting_time = 5)
}, file = file_out)
data_vector <- c('lower_csem', 'higher_csem', 'lower_seismic', 'higher_seismic')
print(data_vector)
list_prices <- list()
list_prices[[1]] <- data.frame(lower_csem = 0.1)
list_prices[[2]] <- data.frame(higher_csem = 0.15)
list_prices[[3]] <- data.frame(lower_seismic = 0.6)
list_prices[[4]] <- data.frame(higher_seismic = 0.65)
list_prices[[5]] <- data.frame(lower_csem = 0.1, higher_csem = 0.15, lower_seismic = 0.6, higher_seismic = 0.65)
df_price <- data.frame(lower_csem = 0.1, higher_csem = 0.15, lower_seismic = 0.6, higher_seismic = 0.65)
file_out <-  paste(path_out, 'prints_local_', today, '.txt', sep = '')
list_global <- list()
start <- proc.time()
capture.output(
for (k in 1:100){
print(k)
list_global[[k]] <- update_from_survey_multiple_data_types(indexes_for_voi, index_survey = indexes_for_survey[k], data_vector, df_price, labels_array, parent_directory, number_of_cores = 6, starting_time = 5)
}, file = file_out)
end <- proc.time()
print(end-start)
file_out <- paste(path_out, 'list_local_', today, '.RData', sep = '')
save(list_global, file = file_out)
load("/Users/susanany/Dropbox/PhD/CompGeo/repository/simulation_case/output/list_local_141222.RData")
library(tinytest)
a <- list_global
load("/Users/susanany/Dropbox/PhD/CompGeo/repository/analyzing_results/results/list_adaptive_281122.RData")
rm(list_global)
load("/Users/susanany/Dropbox/PhD/CompGeo/repository/analyzing_results/results/list_adaptive_281122.RData")
expect_equal(a, list_global)
list_global[[1]]
list_global[[1]]$ESS
unlist(list_global[[1]]$ESS)
unlist(a[[1]]$ESS)
expect_equal(a, list_global)
unlist(a[[1]]$elapsed_time)
unlist(list_global[[1]]$elapsed_time)
df_a <- summarize_results(a, indexes_for_survey, labels_array, surveys = 7)$df
expect_equal(df_a, df_g)
df_g <- summarize_results(list_global, indexes_for_survey, labels_array, surveys = 7)$df
expect_equal(df_a, df_g)
View(df_a)
View(df_g)
load("/Users/susanany/Dropbox/PhD/CompGeo/repository/analyzing_results/results/list_fixed_1_281122.RData")
rm(list_global)
load("/Users/susanany/Dropbox/PhD/CompGeo/repository/analyzing_results/results/list_fixed_1_281122.RData")
df_1 <- summarize_results(list_global, indexes_for_survey, labels_array, surveys = 7)$df
rm(list_global)
load("/Users/susanany/Dropbox/PhD/CompGeo/repository/analyzing_results/results/list_fixed_2_281122.RData")
df_2 <- summarize_results(list_global, indexes_for_survey, labels_array, surveys = 7)$df
load("/Users/susanany/Dropbox/PhD/CompGeo/repository/analyzing_results/results/list_fixed_3_281122.RData")
rm(list_global)
load("/Users/susanany/Dropbox/PhD/CompGeo/repository/analyzing_results/results/list_fixed_3_281122.RData")
df_3 <- summarize_results(list_global, indexes_for_survey, labels_array, surveys = 7)$df
rm(list_global)
load("/Users/susanany/Dropbox/PhD/CompGeo/repository/analyzing_results/results/list_fixed_4_281122.RData")
df_4 <- summarize_results(list_global, indexes_for_survey, labels_array, surveys = 7)$df
expect_equal(df_1, df_2)
rm(list_global)
load("/Users/susanany/Dropbox/PhD/CompGeo/repository/simulation_case/output/list_fixed_1_141222.RData")
a <- list_global
df_a <- summarize_results(a, indexes_for_survey, labels_array, surveys = 7)$df
expect_equal(df_1, df_a)
rm(list_global)
load("/Users/susanany/Dropbox/PhD/CompGeo/repository/simulation_case/output/list_fixed_2_141222.RData")
a <- list_global
df_a <- summarize_results(a, indexes_for_survey, labels_array, surveys = 7)$df
expect_equal(df_1, df_a)
expect_equal(df_1, df_a)
expect_equal(df_2, df_a)
rm(list_global)
load("/Users/susanany/Dropbox/PhD/CompGeo/repository/simulation_case/output/list_fixed_3_141222.RData")
a <- list_global
df_a <- summarize_results(a, indexes_for_survey, labels_array, surveys = 7)$df
expect_equal(df_2, df_a)
expect_equal(df_3, df_a)
View(df_a)
rm(list_global)
load("/Users/susanany/Dropbox/PhD/CompGeo/repository/simulation_case/output/list_fixed_4_141222.RData")
a <- list_global
df_a <- summarize_results(a, indexes_for_survey, labels_array, surveys = 7)$df
expect_equal(df_3, df_a)
expect_equal(df_4, df_a)
load("/Users/susanany/Dropbox/PhD/CompGeo/repository/analyzing_results/results/list_adaptive_281122.RData")
parent_directory <- '/Users/susanany/Dropbox/PhD/CompGeo/repository/'
load(paste(parent_directory, '/analyzing_results/results/list_adaptive_281122.RData', sep = ""))
df <- summarize_results(list_global, indexes_for_survey, labels_array, surveys = 7)$df
source_name <- paste(parent_directory, 'simulation_case/src/functions.R', sep = '')
source(source_name)
today <- format(Sys.time(), '%d%m%y')
load(paste(parent_directory, 'data/saturation_data/cases.RData', sep = ''))
source_name <- paste(parent_directory, 'simulation_case/src/functions.R', sep = '')
source(source_name)
today <- format(Sys.time(), '%d%m%y')
load(paste(parent_directory, 'data/cases.RData', sep = ''))
indexes_for_voi <- new_partition_indexes(labels = labels_array, seed = 1234, size_of_partition = 300)
indexes_for_survey <- new_complement_indexes_balanced(labels = labels_array, indexes_for_voi, seed = 1234, size_of_partition = 100)
df <- summarize_results(list_global, indexes_for_survey, labels_array, surveys = 7)$df
df_stop_all <- df %>% filter(binary_stop == 1)
df_stop_all <- df %>% filter(binary_stop == 1)
df_stop_all %>% count(survey_1)
df_stop_all %>% count(survey_2)
df_stop_all %>% count(survey_3)
df_stop_all %>% count(survey_4)
df_stop_all %>% count(survey_5)
df_stop_all %>% count(survey_6)
df_stop_all %>% count(vector_stop_time)
df_stop_all <- df %>% filter(binary_stop == 1)
df_stop_all %>% count(survey_1)
df_stop_all %>% count(survey_2)
df_stop_all %>% count(survey_3)
df_stop_all %>% count(survey_4)
df_stop_all %>% count(survey_5)
df_stop_all %>% count(survey_6)
df_stop_all %>% count(vector_stop_time)
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%#
# Table 7: Summary of continue #
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%#
df_continue_all <- df %>% filter(binary_stop == 0)
df_continue_all %>% count(survey_1)
df_continue_all %>% count(survey_2)
df_continue_all %>% count(survey_3)
df_continue_all %>% count(survey_4)
df_continue_all %>% count(survey_5)
df_continue_all %>% count(survey_6)
df_continue_all %>% count(survey_7)
#%%%%%%%%%%%%%%%%%%%%%%%%%%#
# Table 8: False negatives #
#%%%%%%%%%%%%%%%%%%%%%%%%%%#
df_fn_all <- df_continue_all %>% filter(df_continue_all$scenario != df_continue_all$binary_stop)
#%%%%%%%%%%%%%%%%%%%%%%%%%#
# Table 9: False positive #
#%%%%%%%%%%%%%%%%%%%%%%%%%#
df_fp_all <- df_stop_all %>% filter(df_stop_all$scenario != df_stop_all$binary_stop)
load("/Users/susanany/Dropbox/PhD/CompGeo/repository/analyzing_results/tables/tables_comparison_281122.RData")
list_metrics
parent_directory <- '/Users/susanany/Dropbox/PhD/CompGeo/repository/'
source_name <- paste(parent_directory, 'simulation_case/src/functions.R', sep = '')
source(source_name)
today <- format(Sys.time(), '%d%m%y')
load(paste(parent_directory, 'data/saturation_data/cases.RData', sep = ''))
source_name <- paste(parent_directory, 'simulation_case/src/functions.R', sep = '')
source(source_name)
today <- format(Sys.time(), '%d%m%y')
load(paste(parent_directory, 'data/cases.RData', sep = ''))
indexes_for_voi <- new_partition_indexes(labels = labels_array, seed = 1234, size_of_partition = 300)
indexes_for_survey <- new_complement_indexes_balanced(labels = labels_array, indexes_for_voi, seed = 1234, size_of_partition = 100)
list_metrics <- list()
load(paste(parent_directory, '/analyzing_results/results/list_fixed_1_281122.RData', sep = ""))
load(paste(parent_directory, '/analyzing_results/results/list_fixed_4_281122.RData', sep = ""))
res <- summarize_results(list_global, indexes_for_survey, labels_array, surveys = 7)
df <- res$df
surveys <- df %>% select(c(survey_1, survey_2, survey_3, survey_4, survey_5, survey_6, survey_7))
surveys[surveys == 'higher_seismic'] <- 0.65
surveys[surveys == 'lower_seismic'] <- 0.6
surveys[surveys == 'higher_csem'] <- 0.15
surveys[surveys == 'lower_csem'] <- 0.1
surveys[surveys == 'none'] <- 0.0
m <- as.numeric(as.matrix(surveys))
m <- matrix(m, ncol = 7, byrow = FALSE)
metrics[1] <- round(mean(rowSums(m, na.rm = TRUE)), 2)
metrics <- c()
# average cost per ensemble
m <- as.numeric(as.matrix(surveys))
m <- matrix(m, ncol = 7, byrow = FALSE)
metrics[1] <- round(mean(rowSums(m, na.rm = TRUE)), 2)
# average number of surveys
metrics[2] <- mean(rowSums(m > 0.0, na.rm = TRUE))
# accuracy, FP and FN
cm <- res$summary
acc <- as.numeric(colSums(cm %>% filter(cat %in% c(1, 2)))[3])
metrics[3] <- acc # accuracy
metrics[4] <- cm[cm$cat == 0, 2] # FP
metrics[5] <- cm[cm$cat == 3, 2] # FN
list_metrics[[4]] <- metrics
metrics
