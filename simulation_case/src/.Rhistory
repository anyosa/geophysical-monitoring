for (step in 1:time_steps){
particles_set <- list()
survey_set <- list()
results_t <- list()
# start block
t = years[step]
for(d in 1:D){
data_d <- data_vector[d]
dataset <- load_realizations(data_d, t, labels_array, parent_directory)
sites_csem <- ncol(dataset) - 2
particles_set[[data_d]] <- new_select_realizations(dataset, indexes_for_voi)
survey_set[[data_d]] <- new_select_realizations(dataset, index_survey)
if(t==2){
w1 <- 0.25
df_vs <- new_set_initial_weights(particles_set[[data_d]])
}
results_t[[data_d]] <-  get_only_voi(particles_set[[data_d]], w1, df_vs, inverse_of_matrix_R(modus = data_d, sites_csem = sites_csem), t, number_of_cores)
}
print(paste('Current w1 =',round(w1,3)))
data_alternative_list<- compute_data_alternative(results_t, price_list) # return 5 options: 4 data_types and 'none', a df is printed
chosen_data_list[[step]] <- data_alternative_list$chosen_data
difference_value_list[[step]] <- data_alternative_list$difference_value
voi_value_list[[step]] <- data_alternative_list$voi_value
if(difference_value_list[[step]]>0){
data_s <- chosen_data_list[[step]]
print(paste('We gather data:', data_s))
print(paste('Index of data_y is index =', index_survey))
sampled_data_y = survey_set[[data_s]] %>% filter(index==index_survey)
#print(sampled_data_y)
#print(class(sampled_data_y))
sites_csem <- ncol(sampled_data_y) - 2
updated_values <- assimilate_data(particles_set[[data_s]], sampled_data_y, w1, df_vs, inverse_of_matrix_R(modus = data_s, sites_csem = sites_csem))
w1 <- updated_values$w1
df_vs <- updated_values$posterior_vs
chosen_alternative = make_decision(t, w1)
print(paste('Decision is at time t =', t, 'is',chosen_alternative))
print(paste('Updated value of w1 =',round(w1,3)))
list_weights[[step]] <- w1
list_v_values[[step]] <- df_vs
if(chosen_alternative == 'stop'){
stop_time <- t
print(paste('We choose to stop at time step t =',t))
break
}
} else{print(paste('No updates at time t =',t))
list_weights[[step]] <- w1
list_v_values[[step]] <- df_vs
}
#
}
return(list(w_values = list_weights, v_values = list_v_values, stop_time = stop_time, voi = voi_value_list, surveys = chosen_data_list))
}
res_1_new <- update_2(indexes_for_voi, index_survey, data_vector, price_list, labels_array, parent_directory, number_of_cores)
res_1_new <- update_2(indexes_for_voi, index_survey, data_vector, price_list, labels_array, parent_dir, number_of_cores)
k = 1
res_1_new <- update_2(indexes_for_voi, index_survey, data_vector, price_list, labels_array, parent_dir, number_of_cores)
res_1_new <- update_2(indexes_for_voi, index_survey = indexes_for_survey[k], data_vector, price_list, labels_array, parent_dir, number_of_cores)
expect_equal(res_1, res_1_new)
k = 5
res_5 <- update_from_survey_multiple_data_types(indexes_for_voi, index_survey = indexes_for_survey[k], data_vector, price_list, labels_array, parent_dir, number_of_cores)
res_5_new <- update_2(indexes_for_voi, index_survey = indexes_for_survey[k], data_vector, price_list, labels_array, parent_dir, number_of_cores)
expect_equal(res_5, res_5_new)
#source('/Users/susanany/phd_research/co2_dynamic/code/simulation_case/src/functions.R')
parent_dir <- '/Users/susanany/phd_research/sequential_voi/code/'
source_name <- paste(parent_dir, 'simulation_case/src/functions.R', sep = '')
source(source_name)
today <- format(Sys.time(), '%d%m%y_%H%M%S')
load(paste(parent_dir, 'data/saturation_data/cases.RData', sep = ''))
indexes_for_voi <- new_partition_indexes(labels = labels_array, seed = 1234, size_of_partition = 300)
indexes_for_survey <- new_complement_indexes_balanced(labels = labels_array, indexes_for_voi, seed = 1234, size_of_partition = 100)
path_out <- paste(parent_dir, 'simulation_case/output/', sep = '')
res_1_ <- update_from_survey_multiple_data_types(indexes_for_voi, index_survey = indexes_for_survey[k], data_vector, price_list, labels_array, parent_dir, number_of_cores)
k = 1
res_1_ <- update_from_survey_multiple_data_types(indexes_for_voi, index_survey = indexes_for_survey[k], data_vector, price_list, labels_array, parent_dir, number_of_cores)
expect_equal(res_1, res_1_)
expect_equal(res_1_, res_1_new)
View(update_from_survey_multiple_data_types)
#source('/Users/susanany/phd_research/co2_dynamic/code/simulation_case/src/functions.R')
parent_dir <- '/Users/susanany/phd_research/sequential_voi/code/'
source_name <- paste(parent_dir, 'simulation_case/src/functions.R', sep = '')
source(source_name)
today <- format(Sys.time(), '%d%m%y_%H%M%S')
load(paste(parent_dir, 'data/saturation_data/cases.RData', sep = ''))
indexes_for_voi <- new_partition_indexes(labels = labels_array, seed = 1234, size_of_partition = 300)
indexes_for_survey <- new_complement_indexes_balanced(labels = labels_array, indexes_for_voi, seed = 1234, size_of_partition = 100)
path_out <- paste(parent_dir, 'simulation_case/output/', sep = '')
###########
parent_directory <- parent_dir
#index_survey <- indexes_for_survey[5] # interesting case, if lower seismic at t=5 then stop, else higher seismic and we continue
# data vector index by time step
# inspect how these objects change over time: particles_set, survey_set
survey_vector <- c('higher_seismic', 'higher_csem')
time_vector <- c(5, 14)
fixed_monitoring_plan <- function(indexes_for_voi, index_survey, survey_vector, time_vector, labels_array, parent_directory, number_of_cores){
years <-time_vector
time_steps <- length(years)
stop_time <- 0
list_weights <- list()
list_v_values <- list()
survey_data_list <- list()
for (step in 1:time_steps){
particles_set <- list()
print(paste('length list particles=', length(particles_set)))
survey_set <- list()
# start block
t = years[step]
data_s <- survey_vector[step]
dataset <- load_realizations(data_s, t, labels_array, parent_directory)
sites_csem <- ncol(dataset) - 2
particles_set[[data_s]] <- new_select_realizations(dataset, indexes_for_voi)
print(paste('length list particles=', length(particles_set)))
survey_set[[data_s]] <- new_select_realizations(dataset, index_survey)
if(step==1){
w1 <- 0.25
df_vs <- new_set_initial_weights(particles_set[[data_s]])
}
print(paste('Current w1 =',round(w1,3)))
#data_alternative_list<- compute_data_alternative(results_t, price_list) # return 5 options: 4 data_types and 'none', a df is printed
#chosen_data_list[[step]] <- data_alternative_list$chosen_data
#difference_value_list[[step]] <- data_alternative_list$difference_value
#voi_value_list[[step]] <- data_alternative_list$voi_value
#if(difference_value_list[[step]]>0){
print(paste('We gather data:', data_s))
survey_data_list[[step]] <- data_s
print(paste('Index of data_y is index =', index_survey))
sampled_data_y = survey_set[[data_s]] %>% filter(index==index_survey)
#print(sampled_data_y)
#print(class(sampled_data_y))
sites_csem <- ncol(sampled_data_y) - 2
updated_values <- assimilate_data(particles_set[[data_s]], sampled_data_y, w1, df_vs, inverse_of_matrix_R(modus = data_s, sites_csem = sites_csem))
w1 <- updated_values$w1
df_vs <- updated_values$posterior_vs
chosen_alternative = make_decision(t, w1)
print(paste('Decision is at time t =', t, 'is',chosen_alternative))
print(paste('Updated value of w1 =',round(w1,3)))
list_weights[[step]] <- w1
list_v_values[[step]] <- df_vs
if(chosen_alternative == 'stop'){
stop_time <- t
print(paste('We choose to stop at time step t =',t))
break
}
}
#
return(list(w_values = list_weights, v_values = list_v_values, stop_time = stop_time, surveys = survey_data_list))
}
today <- format(Sys.time(), '%d%m%y%H%M%S')
fixed_monitoring_plan <- function(indexes_for_voi, index_survey, survey_vector, time_vector, labels_array, parent_directory){
years <-time_vector
time_steps <- length(years)
stop_time <- 0
list_weights <- list()
list_v_values <- list()
survey_data_list <- list()
for (step in 1:time_steps){
particles_set <- list()
print(paste('length list particles=', length(particles_set)))
survey_set <- list()
# start block
t = years[step]
data_s <- survey_vector[step]
dataset <- load_realizations(data_s, t, labels_array, parent_directory)
sites_csem <- ncol(dataset) - 2
particles_set[[data_s]] <- new_select_realizations(dataset, indexes_for_voi)
print(paste('length list particles=', length(particles_set)))
survey_set[[data_s]] <- new_select_realizations(dataset, index_survey)
if(step==1){
w1 <- 0.25
df_vs <- new_set_initial_weights(particles_set[[data_s]])
}
print(paste('Current w1 =',round(w1,3)))
#data_alternative_list<- compute_data_alternative(results_t, price_list) # return 5 options: 4 data_types and 'none', a df is printed
#chosen_data_list[[step]] <- data_alternative_list$chosen_data
#difference_value_list[[step]] <- data_alternative_list$difference_value
#voi_value_list[[step]] <- data_alternative_list$voi_value
#if(difference_value_list[[step]]>0){
print(paste('We gather data:', data_s))
survey_data_list[[step]] <- data_s
print(paste('Index of data_y is index =', index_survey))
sampled_data_y = survey_set[[data_s]] %>% filter(index==index_survey)
#print(sampled_data_y)
#print(class(sampled_data_y))
sites_csem <- ncol(sampled_data_y) - 2
updated_values <- assimilate_data(particles_set[[data_s]], sampled_data_y, w1, df_vs, inverse_of_matrix_R(modus = data_s, sites_csem = sites_csem))
w1 <- updated_values$w1
df_vs <- updated_values$posterior_vs
chosen_alternative = make_decision(t, w1)
print(paste('Decision is at time t =', t, 'is',chosen_alternative))
print(paste('Updated value of w1 =',round(w1,3)))
list_weights[[step]] <- w1
list_v_values[[step]] <- df_vs
if(chosen_alternative == 'stop'){
stop_time <- t
print(paste('We choose to stop at time step t =',t))
break
}
}
#
return(list(w_values = list_weights, v_values = list_v_values, stop_time = stop_time, surveys = survey_data_list))
}
#source('/Users/susanany/phd_research/co2_dynamic/code/simulation_case/src/functions.R')
parent_dir <- '/Users/susanany/phd_research/sequential_voi/code/'
source_name <- paste(parent_dir, 'simulation_case/src/functions.R', sep = '')
source(source_name)
today <- format(Sys.time(), '%d%m%y%H%M%S')
load(paste(parent_dir, 'data/saturation_data/cases.RData', sep = ''))
indexes_for_voi <- new_partition_indexes(labels = labels_array, seed = 1234, size_of_partition = 300)
indexes_for_survey <- new_complement_indexes_balanced(labels = labels_array, indexes_for_voi, seed = 1234, size_of_partition = 100)
path_out <- paste(parent_dir, 'simulation_case/output/', sep = '')
###########
parent_directory <- parent_dir
#index_survey <- indexes_for_survey[5] # interesting case, if lower seismic at t=5 then stop, else higher seismic and we continue
# data vector index by time step
# inspect how these objects change over time: particles_set, survey_set
survey_vector <- c('higher_seismic', 'higher_csem')
time_vector <- c(5, 14)
fixed_monitoring_plan <- function(indexes_for_voi, index_survey, survey_vector, time_vector, labels_array, parent_directory){
years <-time_vector
time_steps <- length(years)
stop_time <- 0
list_weights <- list()
list_v_values <- list()
survey_data_list <- list()
for (step in 1:time_steps){
particles_set <- list()
print(paste('length list particles=', length(particles_set)))
survey_set <- list()
# start block
t = years[step]
data_s <- survey_vector[step]
dataset <- load_realizations(data_s, t, labels_array, parent_directory)
sites_csem <- ncol(dataset) - 2
particles_set[[data_s]] <- new_select_realizations(dataset, indexes_for_voi)
print(paste('length list particles=', length(particles_set)))
survey_set[[data_s]] <- new_select_realizations(dataset, index_survey)
if(step==1){
w1 <- 0.25
df_vs <- new_set_initial_weights(particles_set[[data_s]])
}
print(paste('Current w1 =',round(w1,3)))
#data_alternative_list<- compute_data_alternative(results_t, price_list) # return 5 options: 4 data_types and 'none', a df is printed
#chosen_data_list[[step]] <- data_alternative_list$chosen_data
#difference_value_list[[step]] <- data_alternative_list$difference_value
#voi_value_list[[step]] <- data_alternative_list$voi_value
#if(difference_value_list[[step]]>0){
print(paste('We gather data:', data_s))
survey_data_list[[step]] <- data_s
print(paste('Index of data_y is index =', index_survey))
sampled_data_y = survey_set[[data_s]] %>% filter(index==index_survey)
#print(sampled_data_y)
#print(class(sampled_data_y))
sites_csem <- ncol(sampled_data_y) - 2
updated_values <- assimilate_data(particles_set[[data_s]], sampled_data_y, w1, df_vs, inverse_of_matrix_R(modus = data_s, sites_csem = sites_csem))
w1 <- updated_values$w1
df_vs <- updated_values$posterior_vs
chosen_alternative = make_decision(t, w1)
print(paste('Decision is at time t =', t, 'is',chosen_alternative))
print(paste('Updated value of w1 =',round(w1,3)))
list_weights[[step]] <- w1
list_v_values[[step]] <- df_vs
if(chosen_alternative == 'stop'){
stop_time <- t
print(paste('We choose to stop at time step t =',t))
break
}
}
#
return(list(w_values = list_weights, v_values = list_v_values, stop_time = stop_time, surveys = survey_data_list))
}
file_out <- paste(path_out, 'prints_fixed_', today, '.txt', sep = '')
list_global <- list()
start <- proc.time()
for(k in 1:5){
print(k)
list_global[[k]] <- fixed_monitoring_plan(indexes_for_voi, index_survey = indexes_for_survey[k], survey_vector, time_vector, labels_array, parent_directory)
}
end <- proc.time()
file_out <- paste(path_out, 'list_fixed_', today, '.RData', sep = '')
save(list_global, file = file_out)
res <- summarize_results(list_global, indexes_for_survey, labels_array)
res$meanings
res$df
file_out <- paste(path_out, 'prints_fixed_', today, '.txt', sep = '')
list_global <- list()
start <- proc.time()
for(k in 1:100){
print(k)
list_global[[k]] <- fixed_monitoring_plan(indexes_for_voi, index_survey = indexes_for_survey[k], survey_vector, time_vector, labels_array, parent_directory)
}
end <- proc.time()
file_out <- paste(path_out, 'list_fixed_', today, '.RData', sep = '')
save(list_global, file = file_out)
res <- summarize_results(list_global, indexes_for_survey, labels_array)
res$df
res$summary
res$meanings
.47+.47
df <- res$df
View(df)
survey_vector <- c('higher_seismic', 'higher_csem')
time_vector <- c(8, 14)
fixed_monitoring_plan <- function(indexes_for_voi, index_survey, survey_vector, time_vector, labels_array, parent_directory){
years <-time_vector
time_steps <- length(years)
stop_time <- 0
list_weights <- list()
list_v_values <- list()
survey_data_list <- list()
for (step in 1:time_steps){
particles_set <- list()
print(paste('length list particles=', length(particles_set)))
survey_set <- list()
# start block
t = years[step]
data_s <- survey_vector[step]
dataset <- load_realizations(data_s, t, labels_array, parent_directory)
sites_csem <- ncol(dataset) - 2
particles_set[[data_s]] <- new_select_realizations(dataset, indexes_for_voi)
print(paste('length list particles=', length(particles_set)))
survey_set[[data_s]] <- new_select_realizations(dataset, index_survey)
if(step==1){
w1 <- 0.25
df_vs <- new_set_initial_weights(particles_set[[data_s]])
}
print(paste('Current w1 =',round(w1,3)))
#data_alternative_list<- compute_data_alternative(results_t, price_list) # return 5 options: 4 data_types and 'none', a df is printed
#chosen_data_list[[step]] <- data_alternative_list$chosen_data
#difference_value_list[[step]] <- data_alternative_list$difference_value
#voi_value_list[[step]] <- data_alternative_list$voi_value
#if(difference_value_list[[step]]>0){
print(paste('We gather data:', data_s))
survey_data_list[[step]] <- data_s
print(paste('Index of data_y is index =', index_survey))
sampled_data_y = survey_set[[data_s]] %>% filter(index==index_survey)
#print(sampled_data_y)
#print(class(sampled_data_y))
sites_csem <- ncol(sampled_data_y) - 2
updated_values <- assimilate_data(particles_set[[data_s]], sampled_data_y, w1, df_vs, inverse_of_matrix_R(modus = data_s, sites_csem = sites_csem))
w1 <- updated_values$w1
df_vs <- updated_values$posterior_vs
chosen_alternative = make_decision(t, w1)
print(paste('Decision is at time t =', t, 'is',chosen_alternative))
print(paste('Updated value of w1 =',round(w1,3)))
list_weights[[step]] <- w1
list_v_values[[step]] <- df_vs
if(chosen_alternative == 'stop'){
stop_time <- t
print(paste('We choose to stop at time step t =',t))
break
}
}
#
return(list(w_values = list_weights, v_values = list_v_values, stop_time = stop_time, surveys = survey_data_list))
}
today <- format(Sys.time(), '%d%m%y%H%M%S')
file_out <- paste(path_out, 'prints_fixed_', today, '.txt', sep = '')
list_global <- list()
start <- proc.time()
for(k in 1:100){
print(k)
list_global[[k]] <- fixed_monitoring_plan(indexes_for_voi, index_survey = indexes_for_survey[k], survey_vector, time_vector, labels_array, parent_directory)
}
end <- proc.time()
file_out <- paste(path_out, 'list_fixed_', today, '.RData', sep = '')
save(list_global, file = file_out)
res <- summarize_results(list_global, indexes_for_survey, labels_array)
df <- res$df
res$summary
.47+.48
survey_vector <- c('lower_seismic', 'lower_csem', 'lower_seismic', 'lower_csem')
time_vector <- c(5, 8, 11, 14)
today <- format(Sys.time(), '%d%m%y%H%M%S')
file_out <- paste(path_out, 'prints_fixed_', today, '.txt', sep = '')
list_global <- list()
start <- proc.time()
for(k in 1:100){
print(k)
list_global[[k]] <- fixed_monitoring_plan(indexes_for_voi, index_survey = indexes_for_survey[k], survey_vector, time_vector, labels_array, parent_directory)
}
end <- proc.time()
file_out <- paste(path_out, 'list_fixed_', today, '.RData', sep = '')
save(list_global, file = file_out)
res <- summarize_results(list_global, indexes_for_survey, labels_array)
df <- res$df
res$summary
.45+.44
View(df)
survey_vector <- c('higher_seismic', 'higher_csem', 'higher_seismic', 'higher_csem')
today <- format(Sys.time(), '%d%m%y%H%M%S')
file_out <- paste(path_out, 'prints_fixed_', today, '.txt', sep = '')
list_global <- list()
start <- proc.time()
for(k in 1:100){
print(k)
list_global[[k]] <- fixed_monitoring_plan(indexes_for_voi, index_survey = indexes_for_survey[k], survey_vector, time_vector, labels_array, parent_directory)
}
end <- proc.time()
file_out <- paste(path_out, 'list_fixed_', today, '.RData', sep = '')
save(list_global, file = file_out)
res <- summarize_results(list_global, indexes_for_survey, labels_array)
df <- res$df
res$summary
res$meanings
.49+.48
survey_vector
View(df)
load("/Users/susanany/phd_research/sequential_voi/code/analyzing_results/temp_list_parts_200922.Rdata")
View(a)
res_a <- summarize_results(list_global, indexes_for_survey, labels_array)
res_a <- summarize_results(a, indexes_for_survey, labels_array)
df_a <- res_a$df
View(df_a)
res_a$summary
.37+.41
View(df)
load("/Users/susanany/phd_research/sequential_voi/code/analyzing_results/list_all_150922_175117.RData")
df_ <- summarize_results(list_global, indexes_for_survey, labels_array)$df
View(df)
View(df_)
View(df)
View(df_a)
View(df_)
expect_equal(df_a, df_)
load("/Users/susanany/phd_research/sequential_voi/code/analyzing_results/list_all_150922_175117.RData")
df_ <- summarize_results(list_global, indexes_for_survey, labels_array)$df
View(df_)
rm(list_global)
load("/Users/susanany/phd_research/sequential_voi/code/analyzing_results/list_all_150922_175117.RData")
df_ <- summarize_results(list_global, indexes_for_survey, labels_array)$df
View(df_)
load("/Users/susanany/phd_research/sequential_voi/code/analyzing_results/objects_160922.RData")
View(df_fn)
load("/Users/susanany/phd_research/sequential_voi/code/simulation_case/output/list_fixed_011022135516.RData")
res <- summarize_results(list_global, indexes_for_survey, labels_array)
df <- res$df
View(df)
df_stop <- df %>% filter(binary_stop == 1)
df_continue <- df %>% filter(binary_stop == 0)
# FN & FP
df_fn <- df_continue %>% filter(df_continue$scenario != df_continue$binary_stop)
df_fp <- df_stop %>% filter(df_stop$scenario != df_stop$binary_stop)
# FN & FP
df_fn <- df_continue %>% filter(df_continue$scenario != df_continue$binary_stop)
load("/Users/susanany/phd_research/sequential_voi/code/analyzing_results/list_all_150922_175117.RData")
df_ <- summarize_results(list_global, indexes_for_survey, labels_array)$df
load("/Users/susanany/phd_research/sequential_voi/code/analyzing_results/objects_160922.RData")
# FN & FP
df_fn_fixed <- df_continue %>% filter(df_continue$scenario != df_continue$binary_stop)
df_fp_fixed <- df_stop %>% filter(df_stop$scenario != df_stop$binary_stop)
load("/Users/susanany/phd_research/sequential_voi/code/simulation_case/output/list_fixed_011022135516.RData")
res <- summarize_results(list_global, indexes_for_survey, labels_array)
df <- res$df
res$summary
res$meanings
df_stop <- df %>% filter(binary_stop == 1)
df_continue <- df %>% filter(binary_stop == 0)
# FN & FP
df_fn_fixed <- df_continue %>% filter(df_continue$scenario != df_continue$binary_stop)
# FN & FP
df_fn_fixed <- df_continue %>% filter(df_continue$scenario != df_continue$binary_stop)
df_fp_fixed <- df_stop %>% filter(df_stop$scenario != df_stop$binary_stop)
View(df_fn_fixed)
View(df_fp_fixed)
View(df)
View(df_)
load("/Users/susanany/phd_research/sequential_voi/code/simulation_case/output/list_fixed_011022135516.RData")
res <- summarize_results(list_global, indexes_for_survey, labels_array)
#source('/Users/susanany/phd_research/co2_dynamic/code/simulation_case/src/functions.R')
parent_dir <- '/Users/susanany/phd_research/sequential_voi/code/'
source_name <- paste(parent_dir, 'simulation_case/src/functions.R', sep = '')
source(source_name)
load(paste(parent_dir, 'data/saturation_data/cases.RData', sep = ''))
indexes_for_voi <- new_partition_indexes(labels = labels_array, seed = 1234, size_of_partition = 300)
indexes_for_survey <- new_complement_indexes_balanced(labels = labels_array, indexes_for_voi, seed = 1234, size_of_partition = 100)
path_out <- paste(parent_dir, 'simulation_case/output/', sep = '')
res <- summarize_results(list_global, indexes_for_survey, labels_array)
df_fixed_plan <- res$df
View(df_fixed_plan)
df_stop <- df_fixed_plan %>% filter(binary_stop == 1)
df_continue <- df_fixed_plan %>% filter(binary_stop == 0)
# FN & FP
df_fn_fixed <- df_continue %>% filter(df_continue$scenario != df_continue$binary_stop)
df_fp_fixed <- df_stop %>% filter(df_stop$scenario != df_stop$binary_stop)
load("/Users/susanany/phd_research/sequential_voi/code/simulation_case/output/list_fixed_011022135516.RData")
#source('/Users/susanany/phd_research/co2_dynamic/code/simulation_case/src/functions.R')
parent_dir <- '/Users/susanany/phd_research/sequential_voi/code/'
source_name <- paste(parent_dir, 'simulation_case/src/functions.R', sep = '')
source(source_name)
load(paste(parent_dir, 'data/saturation_data/cases.RData', sep = ''))
indexes_for_voi <- new_partition_indexes(labels = labels_array, seed = 1234, size_of_partition = 300)
indexes_for_survey <- new_complement_indexes_balanced(labels = labels_array, indexes_for_voi, seed = 1234, size_of_partition = 100)
path_out <- paste(parent_dir, 'simulation_case/output/', sep = '')
res <- summarize_results(list_global, indexes_for_survey, labels_array)
df_fixed_plan <- res$df
res$summary
res$meanings
df_stop_fixed <- df_fixed_plan %>% filter(binary_stop == 1)
df_continue_fixed <- df_fixed_plan %>% filter(binary_stop == 0)
# FN & FP
df_fn_fixed <- df_continue %>% filter(df_continue$scenario != df_continue$binary_stop)
# FN & FP
df_fn_fixed <- df_continue_fixed %>% filter(df_continue$scenario != df_continue$binary_stop)
df_stop_fixed <- df_fixed_plan %>% filter(binary_stop == 1)
df_continue_fixed <- df_fixed_plan %>% filter(binary_stop == 0)
# FN & FP
df_fn_fixed <- df_continue_fixed %>% filter(df_continue$scenario != df_continue$binary_stop)
df_stop_fixed <- df_fixed_plan %>% filter(binary_stop == 1)
df_continue_fixed <- df_fixed_plan %>% filter(binary_stop == 0)
# FN & FP
df_fn_fixed <- df_continue_fixed %>% filter(df_continue_fixed$scenario != df_continue_fixed$binary_stop)
df_fp_fixed <- df_stop_fixed %>% filter(df_stop_fixed$scenario != df_stop_fixed$binary_stop)
save.image("/Users/susanany/phd_research/sequential_voi/code/analyzing_results/objects_fixed_011022.RData")
